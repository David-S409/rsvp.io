// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  events  Event[]
  Account Account[]
  Session Session[]

  @@map("users")
}

enum EventType {
  WEDDING
  BIRTHDAY
  CORPORATE
  PARTY
  CELEBRATION
  OTHER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

model Event {
  id           String      @id @default(cuid())
  userId       String
  title        String
  description  String?     @db.Text
  eventType    EventType   @default(OTHER)
  date         DateTime
  time         String
  timezone     String      @default("America/Los_Angeles")
  location     String
  venueName    String?
  capacity     Int?
  isPublic     Boolean     @default(true)
  slug         String      @unique
  coverImage   String?
  customFields Json? // For storing custom RSVP questions
  status       EventStatus @default(DRAFT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  guests Guest[]
  rsvps  RSVP[]

  @@index([userId])
  @@index([slug])
  @@map("events")
}

model Guest {
  id               String    @id @default(cuid())
  eventId          String
  name             String
  email            String
  phone            String?
  plusOnes         Int       @default(0)
  invitationSent   Boolean   @default(false)
  invitationSentAt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  rsvp  RSVP?

  @@unique([eventId, email])
  @@index([eventId])
  @@map("guests")
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
  MAYBE
}

model RSVP {
  id              String     @id @default(cuid())
  eventId         String
  guestId         String     @unique
  status          RSVPStatus @default(PENDING)
  responseDate    DateTime?
  notes           String?    @db.Text
  customResponses Json? // For storing answers to custom questions
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  guest Guest @relation(fields: [guestId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([status])
  @@map("rsvps")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
